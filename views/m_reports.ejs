<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manager Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      padding: 0;
    }

    h1 {
      text-align: center;
    }

    .chart-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .chart-container {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      background-color: #f9f9f9;
      text-align: center;
    }

    canvas {
      max-width: 100%;
      height: 250px;
    }
  </style>
</head>
<body>
  <h1>Manager Dashboard</h1>

  <div class="chart-grid">
    <!-- Task Status Chart -->
    <div class="chart-container">
      <h3>Task Status Summary</h3>
      <canvas id="taskChart"></canvas>
    </div>

    <!-- Timesheet Summary Chart -->
    <div class="chart-container">
      <h3>Timesheet Status Summary</h3>
      <canvas id="timesheetChart"></canvas>
    </div>

    <!-- Pending Approvals Chart -->
    <div class="chart-container">
      <h3>Pending Approvals</h3>
      <canvas id="pendingApprovalChart"></canvas>
    </div>

    <!-- Leave Request Summary -->
    <div class="chart-container">
      <h3>Leave Request Summary</h3>
      <canvas id="leaveRequestChart"></canvas>
    </div>

    <!-- Project Deadlines (Line Chart) -->
    <div class="chart-container">
      <h3>Project Deadlines</h3>
      <canvas id="projectDeadlinesChart"></canvas>
    </div>

    <!-- Tasks with Assignees (Bar Chart) -->
    <div class="chart-container">
      <h3>Tasks with Assignees</h3>
      <canvas id="taskAssigneeChart"></canvas>
    </div>
  </div>

  <script>
    // Data passed from the controller
    const taskSummary = <%- JSON.stringify(taskSummary) %>;
    const timesheetSummary = <%- JSON.stringify(timesheetSummary) %>;
    const pendingApprovals = <%- JSON.stringify(pendingApprovals) %>;
    const leaveRequestSummary = <%- JSON.stringify(leaveRequestSummary) %>;
    const projectsWithDeadlines = <%- JSON.stringify(projectsWithDeadlines) %>;
    const tasksWithAssignees = <%- JSON.stringify(tasksWithAssignees) %>;

    // Task Status Chart
    const taskCtx = document.getElementById('taskChart').getContext('2d');
    new Chart(taskCtx, {
      type: 'bar',
      data: {
        labels: taskSummary.map(item => item.status),
        datasets: [{
          label: 'Task Count',
          data: taskSummary.map(item => item.count),
          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
        }]
      }
    });

    // Timesheet Status Chart
    const timesheetCtx = document.getElementById('timesheetChart').getContext('2d');
    new Chart(timesheetCtx, {
      type: 'pie',
      data: {
        labels: timesheetSummary.map(item => item.status),
        datasets: [{
          data: timesheetSummary.map(item => item.total_hours),
          backgroundColor: ['#4BC0C0', '#FFCE56', '#FF6384']
        }]
      }
    });

    // Pending Approvals Chart
    const pendingApprovalCtx = document.getElementById('pendingApprovalChart').getContext('2d');
    new Chart(pendingApprovalCtx, {
      type: 'doughnut',
      data: {
        labels: ['Pending Approvals'],
        datasets: [{
          data: [pendingApprovals.pendingApprovals],
          backgroundColor: ['#FF6384']
        }]
      }
    });

    // Leave Request Summary Chart
    const leaveRequestCtx = document.getElementById('leaveRequestChart').getContext('2d');
    new Chart(leaveRequestCtx, {
      type: 'polarArea',
      data: {
        labels: leaveRequestSummary.map(item => item.leave_type),
        datasets: [{
          data: leaveRequestSummary.map(item => item.count),
          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
        }]
      }
    });

    const projectDeadlinesCtx = document.getElementById('projectDeadlinesChart').getContext('2d');
    new Chart(projectDeadlinesCtx, {
      type: 'line',
      data: {
        labels: projectsWithDeadlines.map(item => item.project_name),
        datasets: [{
          label: 'Deadlines',
          data: projectsWithDeadlines.map(item => ({
            x: item.project_name,
            y: new Date(item.deadline)
          })),
          borderColor: '#36A2EB',
          fill: false
        }]
      },
      options: {
        scales: {
          x: {
            title: {
              display: true,
              text: 'Projects'
            }
          },
          y: {
            type: 'time',
            time: {
              unit: 'month' // Adjust the unit (e.g., 'day', 'month') as needed
            },
            title: {
              display: true,
              text: 'Deadlines'
            }
          }
        }
      }
    });
    
    // Task Assignee Chart
    const taskAssigneeCtx = document.getElementById('taskAssigneeChart').getContext('2d');
    new Chart(taskAssigneeCtx, {
      type: 'bar',
      data: {
        labels: tasksWithAssignees.map(item => `User ${item.user_id}`),
        datasets: [{
          label: 'Task Count',
          data: tasksWithAssignees.map(item => item.task_count),
          backgroundColor: ['#FFCE56', '#4BC0C0', '#FF6384', '#36A2EB', '#FFCE56']
        }]
      }
    });
  </script>
</body>
</html>
